"""autogenerated by genpy from RelocSensorDriver/Relocdata.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class Relocdata(genpy.Message):
  _md5sum = "9643ee6acc38ea8170edc95077793e3a"
  _type = "RelocSensorDriver/Relocdata"
  _has_header = True #flag to mark the presence of a Header object
  _full_text = """
# this packs the sequence the robot identity an the time stamp
Header header


#Range info:
float64  US1
float64  US2
float64  US3
float64  US4
string	 USID

#Bearing info:
float64  IRx1
float64  IRy1
float64  IRx2
float64  IRy2
float64  IRx3
float64  IRy3
float64  IRx4
float64  IRy4
string	 IRID


#add localization score information

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

"""
  __slots__ = ['header','US1','US2','US3','US4','USID','IRx1','IRy1','IRx2','IRy2','IRx3','IRy3','IRx4','IRy4','IRID']
  _slot_types = ['std_msgs/Header','float64','float64','float64','float64','string','float64','float64','float64','float64','float64','float64','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,US1,US2,US3,US4,USID,IRx1,IRy1,IRx2,IRy2,IRx3,IRy3,IRx4,IRy4,IRID

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Relocdata, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.US1 is None:
        self.US1 = 0.
      if self.US2 is None:
        self.US2 = 0.
      if self.US3 is None:
        self.US3 = 0.
      if self.US4 is None:
        self.US4 = 0.
      if self.USID is None:
        self.USID = ''
      if self.IRx1 is None:
        self.IRx1 = 0.
      if self.IRy1 is None:
        self.IRy1 = 0.
      if self.IRx2 is None:
        self.IRx2 = 0.
      if self.IRy2 is None:
        self.IRy2 = 0.
      if self.IRx3 is None:
        self.IRx3 = 0.
      if self.IRy3 is None:
        self.IRy3 = 0.
      if self.IRx4 is None:
        self.IRx4 = 0.
      if self.IRy4 is None:
        self.IRy4 = 0.
      if self.IRID is None:
        self.IRID = ''
    else:
      self.header = std_msgs.msg.Header()
      self.US1 = 0.
      self.US2 = 0.
      self.US3 = 0.
      self.US4 = 0.
      self.USID = ''
      self.IRx1 = 0.
      self.IRy1 = 0.
      self.IRx2 = 0.
      self.IRy2 = 0.
      self.IRx3 = 0.
      self.IRy3 = 0.
      self.IRx4 = 0.
      self.IRy4 = 0.
      self.IRID = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.US1, _x.US2, _x.US3, _x.US4))
      _x = self.USID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.IRx1, _x.IRy1, _x.IRx2, _x.IRy2, _x.IRx3, _x.IRy3, _x.IRx4, _x.IRy4))
      _x = self.IRID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.US1, _x.US2, _x.US3, _x.US4,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.USID = str[start:end].decode('utf-8')
      else:
        self.USID = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.IRx1, _x.IRy1, _x.IRx2, _x.IRy2, _x.IRx3, _x.IRy3, _x.IRx4, _x.IRy4,) = _struct_8d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IRID = str[start:end].decode('utf-8')
      else:
        self.IRID = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_4d.pack(_x.US1, _x.US2, _x.US3, _x.US4))
      _x = self.USID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_8d.pack(_x.IRx1, _x.IRy1, _x.IRx2, _x.IRy2, _x.IRx3, _x.IRy3, _x.IRx4, _x.IRy4))
      _x = self.IRID
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.US1, _x.US2, _x.US3, _x.US4,) = _struct_4d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.USID = str[start:end].decode('utf-8')
      else:
        self.USID = str[start:end]
      _x = self
      start = end
      end += 64
      (_x.IRx1, _x.IRy1, _x.IRx2, _x.IRy2, _x.IRx3, _x.IRy3, _x.IRx4, _x.IRy4,) = _struct_8d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.IRID = str[start:end].decode('utf-8')
      else:
        self.IRID = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_4d = struct.Struct("<4d")
_struct_8d = struct.Struct("<8d")
