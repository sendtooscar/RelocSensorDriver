<!-- This is a sample lanuch file, please change it based on your needs
 export ROS_MASTER_URI=http://192.168.1.2:11311 
 export ROS_IP=192.168.1.3
 -->
<launch>
	<group ns="drone2">
       <?ignore 
	<!-- node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" clear_params="true" args="-ip 10.0.0.14"-->
	<node name="ardrone_driver1" pkg="ardrone_autonomy" type="ardrone_driver" output="screen" clear_params="true" args="-ip 192.168.1.1">
	    <!-- param name="outdoor" value="0" /-->     
	    <!--param name="max_bitrate" value="4000" /-->
	    <!--param name="bitrate" value="4000" /-->
            <param name="navdata_demo" value="0" />
  	    <!--param name="max_bitrate" value="1" /-->  <!--slows down video-->
	    <!--param name="bitrate" value="1" /-->
	    <!--param name="bitrate_ctrl_mode" value="1" /-->
            <!--param name="video_enable" value="1" /-->
	    <!--param name="flight_without_shell" value="0" /-->
	    <!--param name="altitude_max" value="3000" /-->
            <!-- param name="altitude_min" value="50" /-->
            <!--param name="euler_angle_max" value="0.21" /-->
            <param name="control_vz_max" value="700" />
	    <!--param name="control_yaw" value="1.75" /-->
	    <param name="detect_type" value="10" />
	    <param name="enemy_colors" value="3" />
	    <!--param name="flying_mode" value="0" /-->
	    <param name="detections_select_h" value="32" />
	    <param name="detections_select_v_hsync" value="128" />
	    <param name="enemy_without_shell" value="0" />
	    <!--param name="do_imu_caliberation" value="false" /-->
	    <param name="tf_prefix" value="drone2" />
            <!-- Covariance Values (3x3 matrices reshaped to 1x9)-->
            <!-- rosparam param="cov/imu_la">[0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1]</rosparam-->
            <!-- rosparam param="cov/imu_av">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</rosparam-->
            <!-- rosparam param="cov/imu_or">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 100000.0]</rosparam-->
	</node>
        
         
         ?>

        <!-- Run a robot state publisher to advertise missing tfs  (CPU % <1%) -->
        <param name="robot_description" textfile="$(find RelocSensorDriver)/urdf/drone_tag.urdf" />
        <node pkg="robot_state_publisher" type="state_publisher" name="rob_st_pub" >
                <param name="tf_prefix" value="drone2" />
      		<!-- remap from="robot_description" to="robot_description" /-->
      		<!-- remap from="joint_states" to="different_joint_states" /-->
    	</node>
        
	<!-- Run the ground truth robot tracker (i.e. odometer for the robot)-->
       
        <!-- Run the robot controller (i.e. odometer for the robot)-->
        <!-- node name="drone2_command" pkg="viz_panel1" type="drone_command" output="screen"/-->

	
        <!-- Update to a Reloc based robot tracker -->
       
        </group>


        <group ns="pioneer1">
              
		<param name="robot_description" textfile="$(find RelocSensorDriver)/urdf/pioneer1_tag.urdf" />
       		<node pkg="robot_state_publisher" type="state_publisher" name="rob_st_pub" >
                	<param name="tf_prefix" value="pioneer1" />
      			<!-- remap from="robot_description" to="robot_description_pioneer1_tag" /-->
      			<!-- remap from="joint_states" to="different_joint_states" /-->
    		</node>
	
		<?ignore 
                <!-- Run robot Reloc sensor driver -->
		<node name="RelocNode_tcp1" pkg="RelocSensorDriver" type="RelocNode_tcp1.py" args="192.168.1.1 5000">
			<param name="tf_prefix" value="pioneer1" />
		</node>
		
		?>
         <!-- Run robot Reloc sensor driver (trick keep this here for range only viz)-->
                <node name="RelocNode_tcp2" pkg="RelocSensorDriver" type="RelocNode_tcp1.py" args="127.0.0.1 5000">
			<param name="tf_prefix" value="pioneer1" />
		</node>
              
                
	</group>
    
      
        <?ignore 
	<!-- GROUND TRUTH SYSTEM -->
         <!-- Set this to your camera's name (parent name of topics and TFs)-->
  		<arg name="cam_name" value="MyWebCam" />
    
  	<!-- Run the april tag minimal node (CPU % <25% (TOTAL i.e. 1 CORE))-->
  	<node pkg="apriltag_minimal" type="apriltag_minimal_node" name="apriltag_minimal_node"
        ns="$(arg cam_name)" output="screen">
        	<param name="tf_prefix" value="MyWebCam" />
       		<param name="device_id" type="int" value="1" />
        	<param name="tag_size" type="double" value="0.158" />
                <!--param name="tag_size" type="double" value="0.04" /-->
        	<param name="draw_flag" type="bool" value="true" />
        	<param name="test_cube_flag" type="bool" value="true" />
        	<param name="write_vedio_flag" type="bool" value="false" />
        	<param name="image_transport" type="bool" value="true" />
        	<param name="vedio_file_directory" value="$(find apriltag_minimal)/bags/" />
        	<param name="overlay_tfs_flag" type="bool" value="true" />
        	<param name="overlay_measurement_flag" type="bool" value="true" />
        	<param name="apriltag_calib_file" value="$(find apriltag_minimal)/calibrations/logitechc930e_800_448.yml" />
        	<param name="camera_info_url" value="file://$(find apriltag_minimal)/calibrations/logitechc930e_800_448.yml" />
  	</node>
       
  	<!-- Run Rviz CPU % <35% (TOTAL)-->
  	<!--node name="rviz" pkg="rviz" type="rviz" /-->
  	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find apriltag_minimal)/launch/rviz_apriltag.vcg"/>
     	?>
        
        
</launch>

